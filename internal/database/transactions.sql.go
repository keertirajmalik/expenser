// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: transactions.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createTransaction = `-- name: CreateTransaction :one
INSERT INTO transactions(id, name, amount, type, date, note)
VALUES ($1, $2, $3, $4,$5, $6)
RETURNING id, name, amount, type, date, note
`

type CreateTransactionParams struct {
	ID     uuid.UUID
	Name   string
	Amount int32
	Type   string
	Date   time.Time
	Note   string
}

func (q *Queries) CreateTransaction(ctx context.Context, arg CreateTransactionParams) (Transaction, error) {
	row := q.db.QueryRowContext(ctx, createTransaction,
		arg.ID,
		arg.Name,
		arg.Amount,
		arg.Type,
		arg.Date,
		arg.Note,
	)
	var i Transaction
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Amount,
		&i.Type,
		&i.Date,
		&i.Note,
	)
	return i, err
}

const getTransaction = `-- name: GetTransaction :many
SELECT id, name, amount, type, date, note from transactions
`

func (q *Queries) GetTransaction(ctx context.Context) ([]Transaction, error) {
	rows, err := q.db.QueryContext(ctx, getTransaction)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Transaction
	for rows.Next() {
		var i Transaction
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Amount,
			&i.Type,
			&i.Date,
			&i.Note,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
