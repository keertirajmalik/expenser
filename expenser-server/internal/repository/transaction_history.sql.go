// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: transaction_history.sql

package repository

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createTransactionHistory = `-- name: CreateTransactionHistory :one
INSERT INTO transaction_history(transaction_id, field_name, old_value, new_value)
VALUES ($1, $2, $3, $4)
RETURNING id, transaction_id, field_name, old_value, new_value, changed_at
`

type CreateTransactionHistoryParams struct {
	TransactionID uuid.UUID `json:"transaction_id"`
	FieldName     string    `json:"field_name"`
	OldValue      string    `json:"old_value"`
	NewValue      string    `json:"new_value"`
}

func (q *Queries) CreateTransactionHistory(ctx context.Context, arg CreateTransactionHistoryParams) (TransactionHistory, error) {
	row := q.db.QueryRow(ctx, createTransactionHistory,
		arg.TransactionID,
		arg.FieldName,
		arg.OldValue,
		arg.NewValue,
	)
	var i TransactionHistory
	err := row.Scan(
		&i.ID,
		&i.TransactionID,
		&i.FieldName,
		&i.OldValue,
		&i.NewValue,
		&i.ChangedAt,
	)
	return i, err
}

const getTransactionHistory = `-- name: GetTransactionHistory :many
SELECT
    transaction_history.transaction_id,
    transaction_history.field_name,
    transaction_history.old_value,
    transaction_history.new_value,
    transaction_history.changed_at
FROM transaction_history
WHERE transaction_history.transaction_id=$1
ORDER BY transaction_history.changed_at DESC
`

type GetTransactionHistoryRow struct {
	TransactionID uuid.UUID          `json:"transaction_id"`
	FieldName     string             `json:"field_name"`
	OldValue      string             `json:"old_value"`
	NewValue      string             `json:"new_value"`
	ChangedAt     pgtype.Timestamptz `json:"changed_at"`
}

func (q *Queries) GetTransactionHistory(ctx context.Context, transactionID uuid.UUID) ([]GetTransactionHistoryRow, error) {
	rows, err := q.db.Query(ctx, getTransactionHistory, transactionID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetTransactionHistoryRow
	for rows.Next() {
		var i GetTransactionHistoryRow
		if err := rows.Scan(
			&i.TransactionID,
			&i.FieldName,
			&i.OldValue,
			&i.NewValue,
			&i.ChangedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
