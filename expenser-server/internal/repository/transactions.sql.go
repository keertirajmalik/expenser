// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: transactions.sql

package repository

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgconn"
	"github.com/jackc/pgx/v5/pgtype"
)

const createTransaction = `-- name: CreateTransaction :one
WITH inserted AS (
    INSERT INTO transactions(id, name, amount, type, date, note, user_id)
    VALUES ($1, $2, $3, $4,$5, $6, $7)
    RETURNING id, name, amount, type, date, note, user_id, created_at, updated_at
)
SELECT inserted.id,
    inserted."name",
    inserted.amount,
    transaction_types."name" AS type,
    inserted."date",
    inserted.note,
    users."name" AS user,
    inserted.created_at,
    inserted.updated_at
FROM inserted
INNER JOIN users ON inserted.user_id = users.id
INNER JOIN transaction_types ON inserted."type" = transaction_types.id
`

type CreateTransactionParams struct {
	ID     uuid.UUID      `json:"id"`
	Name   string         `json:"name"`
	Amount pgtype.Numeric `json:"amount"`
	Type   uuid.UUID      `json:"type"`
	Date   pgtype.Date    `json:"date"`
	Note   *string        `json:"note"`
	UserID uuid.UUID      `json:"user_id"`
}

type CreateTransactionRow struct {
	ID        uuid.UUID          `json:"id"`
	Name      string             `json:"name"`
	Amount    pgtype.Numeric     `json:"amount"`
	Type      string             `json:"type"`
	Date      pgtype.Date        `json:"date"`
	Note      *string            `json:"note"`
	User      string             `json:"user"`
	CreatedAt pgtype.Timestamptz `json:"created_at"`
	UpdatedAt pgtype.Timestamptz `json:"updated_at"`
}

func (q *Queries) CreateTransaction(ctx context.Context, arg CreateTransactionParams) (CreateTransactionRow, error) {
	row := q.db.QueryRow(ctx, createTransaction,
		arg.ID,
		arg.Name,
		arg.Amount,
		arg.Type,
		arg.Date,
		arg.Note,
		arg.UserID,
	)
	var i CreateTransactionRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Amount,
		&i.Type,
		&i.Date,
		&i.Note,
		&i.User,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteTransaction = `-- name: DeleteTransaction :execresult
DELETE FROM transactions where id = $1 AND user_id=$2
`

type DeleteTransactionParams struct {
	ID     uuid.UUID `json:"id"`
	UserID uuid.UUID `json:"user_id"`
}

func (q *Queries) DeleteTransaction(ctx context.Context, arg DeleteTransactionParams) (pgconn.CommandTag, error) {
	return q.db.Exec(ctx, deleteTransaction, arg.ID, arg.UserID)
}

const getTransaction = `-- name: GetTransaction :many
SELECT transactions.id,
transactions."name",
    transactions.amount,
    transaction_types."name" AS type,
    transactions."date",
    transactions.note,
    users."name" AS user,
    transactions.created_at,
    transactions.updated_at
FROM transactions
INNER JOIN users ON transactions.user_id = users.id
INNER JOIN transaction_types ON transactions."type"  = transaction_types.id
WHERE transactions.user_id=$1
ORDER BY transactions.created_at DESC
`

type GetTransactionRow struct {
	ID        uuid.UUID          `json:"id"`
	Name      string             `json:"name"`
	Amount    pgtype.Numeric     `json:"amount"`
	Type      string             `json:"type"`
	Date      pgtype.Date        `json:"date"`
	Note      *string            `json:"note"`
	User      string             `json:"user"`
	CreatedAt pgtype.Timestamptz `json:"created_at"`
	UpdatedAt pgtype.Timestamptz `json:"updated_at"`
}

func (q *Queries) GetTransaction(ctx context.Context, userID uuid.UUID) ([]GetTransactionRow, error) {
	rows, err := q.db.Query(ctx, getTransaction, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetTransactionRow
	for rows.Next() {
		var i GetTransactionRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Amount,
			&i.Type,
			&i.Date,
			&i.Note,
			&i.User,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTransaction = `-- name: UpdateTransaction :one
WITH updated AS (
    UPDATE transactions
    SET name = $2,
        amount = $3,
        type =  $4,
        date = $5,
        note = $6
    WHERE transactions.id = $1 AND transactions.user_id=$7
    RETURNING id, name, amount, type, date, note, user_id, created_at, updated_at
)
SELECT updated.id,
    updated."name",
    updated.amount,
    transaction_types."name" AS type,
    updated."date",
    updated.note,
    users."name" AS user,
    updated.created_at,
    updated.updated_at
FROM updated
INNER JOIN users ON updated.user_id = users.id
INNER JOIN transaction_types ON updated."type" = transaction_types.id
`

type UpdateTransactionParams struct {
	ID     uuid.UUID      `json:"id"`
	Name   string         `json:"name"`
	Amount pgtype.Numeric `json:"amount"`
	Type   uuid.UUID      `json:"type"`
	Date   pgtype.Date    `json:"date"`
	Note   *string        `json:"note"`
	UserID uuid.UUID      `json:"user_id"`
}

type UpdateTransactionRow struct {
	ID        uuid.UUID          `json:"id"`
	Name      string             `json:"name"`
	Amount    pgtype.Numeric     `json:"amount"`
	Type      string             `json:"type"`
	Date      pgtype.Date        `json:"date"`
	Note      *string            `json:"note"`
	User      string             `json:"user"`
	CreatedAt pgtype.Timestamptz `json:"created_at"`
	UpdatedAt pgtype.Timestamptz `json:"updated_at"`
}

func (q *Queries) UpdateTransaction(ctx context.Context, arg UpdateTransactionParams) (UpdateTransactionRow, error) {
	row := q.db.QueryRow(ctx, updateTransaction,
		arg.ID,
		arg.Name,
		arg.Amount,
		arg.Type,
		arg.Date,
		arg.Note,
		arg.UserID,
	)
	var i UpdateTransactionRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Amount,
		&i.Type,
		&i.Date,
		&i.Note,
		&i.User,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
