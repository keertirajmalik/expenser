// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: category.sql

package repository

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgconn"
	"github.com/jackc/pgx/v5/pgtype"
)

const createCategory = `-- name: CreateCategory :one
WITH inserted AS (
    INSERT INTO categories(id, name, description, user_id)
    VALUES ($1, $2, $3, $4)
    RETURNING id, name, description, user_id, created_at, updated_at
)
SELECT
    inserted.id,
    inserted.name,
    inserted.description,
    users.name AS user,
    inserted.created_at,
    inserted.updated_at
FROM inserted
INNER JOIN users ON inserted.user_id = users.id
`

type CreateCategoryParams struct {
	ID          uuid.UUID `json:"id"`
	Name        string    `json:"name"`
	Description *string   `json:"description"`
	UserID      uuid.UUID `json:"user_id"`
}

type CreateCategoryRow struct {
	ID          uuid.UUID          `json:"id"`
	Name        string             `json:"name"`
	Description *string            `json:"description"`
	User        string             `json:"user"`
	CreatedAt   pgtype.Timestamptz `json:"created_at"`
	UpdatedAt   pgtype.Timestamptz `json:"updated_at"`
}

func (q *Queries) CreateCategory(ctx context.Context, arg CreateCategoryParams) (CreateCategoryRow, error) {
	row := q.db.QueryRow(ctx, createCategory,
		arg.ID,
		arg.Name,
		arg.Description,
		arg.UserID,
	)
	var i CreateCategoryRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.User,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteCategory = `-- name: DeleteCategory :execresult
DELETE FROM categories where id=$1 AND user_id=$2
`

type DeleteCategoryParams struct {
	ID     uuid.UUID `json:"id"`
	UserID uuid.UUID `json:"user_id"`
}

func (q *Queries) DeleteCategory(ctx context.Context, arg DeleteCategoryParams) (pgconn.CommandTag, error) {
	return q.db.Exec(ctx, deleteCategory, arg.ID, arg.UserID)
}

const getCategory = `-- name: GetCategory :many
SELECT
    categories.id,
    categories.name,
    categories.description,
    users.name AS user,
    categories.created_at,
    categories.updated_at
FROM categories
INNER JOIN users ON categories.user_id = users.id
WHERE categories.user_id=$1
ORDER BY categories.created_at DESC
`

type GetCategoryRow struct {
	ID          uuid.UUID          `json:"id"`
	Name        string             `json:"name"`
	Description *string            `json:"description"`
	User        string             `json:"user"`
	CreatedAt   pgtype.Timestamptz `json:"created_at"`
	UpdatedAt   pgtype.Timestamptz `json:"updated_at"`
}

func (q *Queries) GetCategory(ctx context.Context, userID uuid.UUID) ([]GetCategoryRow, error) {
	rows, err := q.db.Query(ctx, getCategory, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetCategoryRow
	for rows.Next() {
		var i GetCategoryRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.User,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCategoryById = `-- name: GetCategoryById :one
SELECT
    categories.id,
    categories.name,
    categories.description,
    users.name AS user,
    categories.created_at,
    categories.updated_at
FROM categories
INNER JOIN users ON categories.user_id = users.id
WHERE categories.user_id=$1 AND categories.id=$2
ORDER BY categories.created_at DESC
`

type GetCategoryByIdParams struct {
	UserID uuid.UUID `json:"user_id"`
	ID     uuid.UUID `json:"id"`
}

type GetCategoryByIdRow struct {
	ID          uuid.UUID          `json:"id"`
	Name        string             `json:"name"`
	Description *string            `json:"description"`
	User        string             `json:"user"`
	CreatedAt   pgtype.Timestamptz `json:"created_at"`
	UpdatedAt   pgtype.Timestamptz `json:"updated_at"`
}

func (q *Queries) GetCategoryById(ctx context.Context, arg GetCategoryByIdParams) (GetCategoryByIdRow, error) {
	row := q.db.QueryRow(ctx, getCategoryById, arg.UserID, arg.ID)
	var i GetCategoryByIdRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.User,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateCategory = `-- name: UpdateCategory :one
WITH updated AS (
    UPDATE categories
    SET name = $2,
    description = $3
    WHERE categories.id = $1 And categories.user_id=$4
    RETURNING id, name, description, user_id, created_at, updated_at
)
SELECT
    updated.id,
    updated.name,
    updated.description,
    users.name AS user,
    updated.created_at,
    updated.updated_at
FROM updated
INNER JOIN users ON updated.user_id = users.id
`

type UpdateCategoryParams struct {
	ID          uuid.UUID `json:"id"`
	Name        string    `json:"name"`
	Description *string   `json:"description"`
	UserID      uuid.UUID `json:"user_id"`
}

type UpdateCategoryRow struct {
	ID          uuid.UUID          `json:"id"`
	Name        string             `json:"name"`
	Description *string            `json:"description"`
	User        string             `json:"user"`
	CreatedAt   pgtype.Timestamptz `json:"created_at"`
	UpdatedAt   pgtype.Timestamptz `json:"updated_at"`
}

func (q *Queries) UpdateCategory(ctx context.Context, arg UpdateCategoryParams) (UpdateCategoryRow, error) {
	row := q.db.QueryRow(ctx, updateCategory,
		arg.ID,
		arg.Name,
		arg.Description,
		arg.UserID,
	)
	var i UpdateCategoryRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.User,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
