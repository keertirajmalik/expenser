// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: transaction_types.sql

package repository

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgconn"
)

const createTransactionType = `-- name: CreateTransactionType :one
INSERT INTO transaction_types(id, name, description, user_id)
VALUES ($1, $2, $3, $4)
RETURNING id, name, description, user_id, created_at, updated_at
`

type CreateTransactionTypeParams struct {
	ID          uuid.UUID `json:"id"`
	Name        string    `json:"name"`
	Description *string   `json:"description"`
	UserID      uuid.UUID `json:"user_id"`
}

func (q *Queries) CreateTransactionType(ctx context.Context, arg CreateTransactionTypeParams) (TransactionType, error) {
	row := q.db.QueryRow(ctx, createTransactionType,
		arg.ID,
		arg.Name,
		arg.Description,
		arg.UserID,
	)
	var i TransactionType
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.UserID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteTransactionType = `-- name: DeleteTransactionType :execresult
DELETE FROM transaction_types where id=$1 AND user_id=$2
`

type DeleteTransactionTypeParams struct {
	ID     uuid.UUID `json:"id"`
	UserID uuid.UUID `json:"user_id"`
}

func (q *Queries) DeleteTransactionType(ctx context.Context, arg DeleteTransactionTypeParams) (pgconn.CommandTag, error) {
	return q.db.Exec(ctx, deleteTransactionType, arg.ID, arg.UserID)
}

const getTransactionType = `-- name: GetTransactionType :many
SELECT id, name, description, user_id, created_at, updated_at FROM transaction_types WHERE user_id=$1
`

func (q *Queries) GetTransactionType(ctx context.Context, userID uuid.UUID) ([]TransactionType, error) {
	rows, err := q.db.Query(ctx, getTransactionType, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []TransactionType
	for rows.Next() {
		var i TransactionType
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.UserID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTransactionTypeById = `-- name: GetTransactionTypeById :one
SELECT id, name, description, user_id, created_at, updated_at FROM transaction_types where id=$1 AND user_id=$2
`

type GetTransactionTypeByIdParams struct {
	ID     uuid.UUID `json:"id"`
	UserID uuid.UUID `json:"user_id"`
}

func (q *Queries) GetTransactionTypeById(ctx context.Context, arg GetTransactionTypeByIdParams) (TransactionType, error) {
	row := q.db.QueryRow(ctx, getTransactionTypeById, arg.ID, arg.UserID)
	var i TransactionType
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.UserID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateTransactionType = `-- name: UpdateTransactionType :one
UPDATE transaction_types
SET name = $2,
    description = $3
WHERE id = $1 And user_id=$4
RETURNING id, name, description, user_id, created_at, updated_at
`

type UpdateTransactionTypeParams struct {
	ID          uuid.UUID `json:"id"`
	Name        string    `json:"name"`
	Description *string   `json:"description"`
	UserID      uuid.UUID `json:"user_id"`
}

func (q *Queries) UpdateTransactionType(ctx context.Context, arg UpdateTransactionTypeParams) (TransactionType, error) {
	row := q.db.QueryRow(ctx, updateTransactionType,
		arg.ID,
		arg.Name,
		arg.Description,
		arg.UserID,
	)
	var i TransactionType
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.UserID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
