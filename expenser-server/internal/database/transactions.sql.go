// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: transactions.sql

package database

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const createTransaction = `-- name: CreateTransaction :one
INSERT INTO transactions(id, name, amount, type, date, note, user_id)
VALUES ($1, $2, $3, $4,$5, $6, $7)
RETURNING id, name, amount, type, date, note, user_id
`

type CreateTransactionParams struct {
	ID     uuid.UUID
	Name   string
	Amount int32
	Type   string
	Date   time.Time
	Note   sql.NullString
	UserID uuid.UUID
}

func (q *Queries) CreateTransaction(ctx context.Context, arg CreateTransactionParams) (Transaction, error) {
	row := q.db.QueryRowContext(ctx, createTransaction,
		arg.ID,
		arg.Name,
		arg.Amount,
		arg.Type,
		arg.Date,
		arg.Note,
		arg.UserID,
	)
	var i Transaction
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Amount,
		&i.Type,
		&i.Date,
		&i.Note,
		&i.UserID,
	)
	return i, err
}

const deleteTransaction = `-- name: DeleteTransaction :execresult
DELETE FROM transactions where id = $1 AND user_id=$2
`

type DeleteTransactionParams struct {
	ID     uuid.UUID
	UserID uuid.UUID
}

func (q *Queries) DeleteTransaction(ctx context.Context, arg DeleteTransactionParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, deleteTransaction, arg.ID, arg.UserID)
}

const getTransaction = `-- name: GetTransaction :many
SELECT id, name, amount, type, date, note, user_id from transactions where user_id=$1
`

func (q *Queries) GetTransaction(ctx context.Context, userID uuid.UUID) ([]Transaction, error) {
	rows, err := q.db.QueryContext(ctx, getTransaction, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Transaction
	for rows.Next() {
		var i Transaction
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Amount,
			&i.Type,
			&i.Date,
			&i.Note,
			&i.UserID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTransaction = `-- name: UpdateTransaction :one
UPDATE transactions
SET name = $2,
    amount = $3,
    type =  $4,
    date = $5,
    note = $6
WHERE id = $1 AND user_id=$7
RETURNING id, name, amount, type, date, note, user_id
`

type UpdateTransactionParams struct {
	ID     uuid.UUID
	Name   string
	Amount int32
	Type   string
	Date   time.Time
	Note   sql.NullString
	UserID uuid.UUID
}

func (q *Queries) UpdateTransaction(ctx context.Context, arg UpdateTransactionParams) (Transaction, error) {
	row := q.db.QueryRowContext(ctx, updateTransaction,
		arg.ID,
		arg.Name,
		arg.Amount,
		arg.Type,
		arg.Date,
		arg.Note,
		arg.UserID,
	)
	var i Transaction
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Amount,
		&i.Type,
		&i.Date,
		&i.Note,
		&i.UserID,
	)
	return i, err
}
